import importlib
import inspect
import pkgutil
from typing import List, Set

import merlin
from merlin.plots._base import AbstractPlot


def get_available_plots() -> Set:
    """Get all plots defined within any submodule of merlin.plots.

    Returns: a set of references to the plots
    """
    plots = set()
    for _, modname, _ in pkgutil.iter_modules(merlin.plots.__path__):
        module = importlib.import_module(merlin.plots.__name__ + "." + modname)
        for _, obj in inspect.getmembers(module):
            if inspect.isclass(obj) and issubclass(obj, AbstractPlot) and obj != AbstractPlot:
                plots.add(obj)
    return plots


class PlotEngine:
    def __init__(self, plot_task, tasks):
        """Create a new plot engine.

        Args:
            plot_task: the analysis task to save the plots and plot
                metadata into
            tasks: a dictionary containing references to the analysis
                tasks to use for plotting results.
        """
        self.plot_task = plot_task
        self.tasks = tasks
        available_plots = [x(plot_task) for x in get_available_plots()]
        self.plots = [x for x in available_plots if x.is_relevant(tasks)]

        required_metadata = {m for p in self.plots for m in p.required_metadata if m}
        self.metadata = {x.metadata_name(): x(plot_task, tasks) for x in required_metadata}
        for metadata in self.metadata.values():
            metadata.load_state()

    def get_plots(self) -> List[AbstractPlot]:
        """Get a list of the plots that this plot engine will generate.

        Returns: A list of the plot objects that will be generated by this
            plot engine.
        """
        return self.plots

    def take_step(self) -> bool:
        """Generate metadata and plots from newly available analysis results.

        Returns: True if all plots have been generated and otherwise false.
        """
        incomplete_plots = [p for p in self.plots if not p.is_complete()]
        if len(incomplete_plots) == 0:
            return True

        for m in self.metadata.values():
            m.update()

        complete_tasks = [k for k, v in self.tasks.items() if v.is_complete()]
        complete_metadata = [k for k, v in self.metadata.items() if v.is_complete()]
        ready_plots = [p for p in incomplete_plots if p.is_ready(complete_tasks, complete_metadata)]
        for p in ready_plots:
            self.plot_task.logger.info(f"Plotting {p.figure_name()}")
            p.plot(self.tasks, self.metadata)
            self.plot_task.logger.info(f"Done plotting {p.figure_name()}")

        return len([p for p in self.plots if not p.is_complete()]) == 0
